
def ftpPublish( servername, sourceFiles, removePrefix, remoteDirectory ) 
{
	if( servername == "" ) 
	{
		echo "servername이 없음"
		return
	}
	if( sourceFiles == "" ) 
	{
		echo "sourceFiles가 없음"
		return
	}
	if( removePrefix == "" ) 
	{
		echo "removePrefix가 없음"
		return
	}
	if( remoteDirectory == "" ) 
	{
		echo "remoteDirectory가 없음"
		return
	}

    /* 빌드 후 조치 > [Send build a artifacts over SSH] 를 pipeline으로 구현 */
	ftpPublisher masterNodeName : "${node_name}", 
								  alwaysPublishFromMaster: false,
								  continueOnError: false, failOnError: false, 
								  paramPublish: [remotePublishPath : ''],
							      publishers: 
							                  [[
												configName: servername, 
												transfers: 
															[[
															  patternSeparator:"[, ]+",
															  remoteDirectory: remoteDirectory,
															  removePrefix: removePrefix,
															  sourceFiles: sourceFiles
															]]
							                  ]]			
}		

def sshPublisher( servername, sourceFiles, removePrefix, remoteDirectory, execCommand ) 
{
	if( servername == "" ) 
	{
		echo "servername이 없음"
		return
	}
	if( sourceFiles == "" ) 
	{
		echo "sourceFiles가 없음"
		return
	}
	if( removePrefix == "" ) 
	{
		echo "removePrefix가 없음"
		return
	}
	if( remoteDirectory == "" ) 
	{
		echo "remoteDirectory가 없음"
		return
	}
	if( execCommand == null ) 
	{
		execCommand = ""
	}

	echo  "###############################################"
	echo  "# sshPublisher param"
	echo "servername : " + servername
	echo "sourceFiles : " + sourceFiles
	echo "removePrefix : " + removePrefix
	echo "remoteDirectory : " + remoteDirectory
	echo "execCommand : " + execCommand
	echo  "###############################################"
	
    sshPublisher(
        publishers: 
          [
	           sshPublisherDesc(
		           configName: servername, 
			       transfers:  
			                   [
		                            sshTransfer
		                            (
			                            excludes: '',
			                            remoteDirectory: remoteDirectory,
			                            remoteDirectorySDF: false,
			                            removePrefix: removePrefix,
			                            sourceFiles: sourceFiles,
			                            execCommand: execCommand
		                            ) 
			                    ],
                    usePromotionTimestamp: false,
                    useWorkspaceInPromotion: false,
                	verbose: true
		        )    
           ]
    )
}

def ssh_exec(servername, execCommand) 
{
    if(servername == "") 
    {
        echo "servername이 없음"
        return
    }
    
    if(execCommand == "") 
    {
        echo "execCommand이 없음"
        return
    }
    
    echo "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

    sshPublisher(
        publishers: 
        [
	          sshPublisherDesc(
	                configName: servername, 
	                transfers:  
	                          [
	                                sshTransfer
	                                (
		                                excludes: '',
		                                remoteDirectory: '',
		                                remoteDirectorySDF: false,
		                                removePrefix: '',
		                                sourceFiles: '',
		                                execCommand: execCommand
	                                ) 
	                           ],
	                usePromotionTimestamp: false,
	                useWorkspaceInPromotion: false,
	                verbose: false
	           )    
         ]
    )
    echo "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
}   

def makeExecCommandEnvironment( buildProjectName, buildNumber, docBase, targetBase ) 
{
	if( buildProjectName == "" ) return ""
	if( buildNumber == "" ) return ""
	if( docBase == "" ) return ""
	if( targetBase == "" ) return ""

	return '''

	###############################################################
	# 2020.04.19 ADD
	###############################################################
	JENKINS_WORKSPACE='/home/eci/eGovCI-3.8.0/home/jenkins/workspace'
	BUILD_DIR=$JENKINS_WORKSPACE/''' + buildProjectName + '''_dev
	BUILD_TARGET_DIR=$BUILD_DIR/target
	PUB_SRC_DIR=$BUILD_TARGET_DIR
	PUB_DEST_DIR1=''' + docBase + '''/wars
	PUB_DEST_DIR2=$PUB_DEST_DIR1/''' + buildProjectName + '''
	PUB_DEST_DIR3=$PUB_DEST_DIR2/''' + buildNumber + '''
	PUB_DEST_DIR=$PUB_DEST_DIR3/''' + targetBase + '''
	IMSI_DEPLOY_DIR='/apphome/edudocs/wasapp8/DA101.ex-MyBatis'
	###############################################################
	# ex) JENKINS_WORKSPACE :  /home/eci/eGovCI-3.8.0/home/jenkins/workspace
	# ex) BUILD_DIR :  /home/eci/eGovCI-3.8.0/home/jenkins/workspace/DB101.mvntest
	# ex) BUILD_TARGET_DIR :  /home/eci/eGovCI-3.8.0/home/jenkins/workspace/DB101.mvntest/target
	# ex) PUB_SRC_DIR :  /home/eci/eGovCI-3.8.0/home/jenkins/workspace/DB101.mvntest/target
	# ex) PUB_DEST_DIR :  /apphome/edudocs/wars/DB101.mvntest/466/wasapp8
	###############################################################

  	#!/bin/bash
    . /home/jeus8/.bash_profile

	BUILD_DATE=`date +%Y%m%d%H%M`
	PROJECT_NAME=''' + buildProjectName + '''
	DOC_BASE=''' + docBase + '''
	TARGET_BASE=''' + targetBase + '''
	BCK_BASE=backup
	WAR_PATH=$DOC_BASE/wars/$PROJECT_NAME/''' + buildNumber + '''
	TARGET_HOME=$DOC_BASE/$TARGET_BASE/$PROJECT_NAME
	TARGET_BCK=$DOC_BASE/$TARGET_BASE/$BCK_BASE/$PROJECT_NAME

	if [ ! -d "$DOC_BASE/wars/$PROJECT_NAME" ]
		then
		# mkdir -m 755 $DOC_BASE/wars/$PROJECT_NAME
		mkdir -p $DOC_BASE/wars/$PROJECT_NAME
	fi

	if [ ! -d "$TARGET_HOME" ]
		then
		# mkdir -m 755 $TARGET_HOME
		mkdir -p $TARGET_HOME
	fi

	if [ ! -d "$TARGET_BCK" ]
		then
		# mkdir -m 755 $TARGET_BCK 
		mkdir -p $TARGET_BCK
	fi

	'''
}

def makeExecCommand_publish( buildProjectName, buildNumber, docBase, targetBase, compressionType ) 
{
	if( buildProjectName == "" ) return ""
	if( buildNumber == "" ) return ""
	if( docBase == "" ) return ""
	if( targetBase == "" ) return ""
	if( compressionType == "" ) return ""

	def sshCommand = makeExecCommandEnvironment(buildProjectName, buildNumber, docBase, targetBase) + '''
	echo "UnArchive Start==="
	echo "WAR_PATH : " $WAR_PATH
	echo "TARGET_BASE : " $TARGET_BASE
	
	mkdir -p $WAR_PATH/$TARGET_BASE

	echo  "###############################################"
	echo "JENKINS_WORKSPACE : " $JENKINS_WORKSPACE
	echo "BUILD_DIR : " $BUILD_DIR
	echo "BUILD_TARGET_DIR : " $BUILD_TARGET_DIR
	echo "PUB_SRC_DIR : " $PUB_SRC_DIR
	echo "PUB_DEST_DIR : " $PUB_DEST_DIR
	echo  "###############################################"
	# cp $WAR_PATH/*.''' + compressionType + ''' $WAR_PATH/$TARGET_BASE

	cp $PUB_SRC_DIR/*.''' + compressionType + ''' $PUB_DEST_DIR

	echo  "###############################################"
	echo  "# IMSI_DEPLOY_DIR "
	echo  "# IMSI_DEPLOY_DIR : " $IMSI_DEPLOY_DIR
	echo  "###############################################"
	if [ ''' + compressionType + ''' == "war" ]; then
		cd $IMSI_DEPLOY_DIR
		rm -Rf /apphome/edudocs/wasapp8/$PROJECT_NAME/*
		cp $PUB_SRC_DIR/*.''' + compressionType + ''' $ISI_DEPLOY_DIR
		jar xvf *.''' + compressionType + '''
		rm *.''' + compressionType + '''	
	fi
	echo  "###############################################"
	
	#cd $WAR_PATH/$TARGET_BASE
	cd $PUB_DEST_DIR

	jar xvf *.''' + compressionType + '''
	rm *.''' + compressionType + '''
	
	echo "UnArchive End ========"  '''

	return sshCommand
}

pipeline 
{
    agent any
    
    environment 
    {
        node_name = 'master'
        buildVersion = VersionNumber(
             projectStartDate: '2018-05-01',
	         versionNumberString: '${BUILD_NUMBER}',
	         versionPrefix: '0.0.',
             worstResultForIncrement: 'SUCCESS'
        )
    }
    
    tools 
    {
        jdk '1.8.0_77'
        maven 'apache-maven-3.3.3'
    }
    
    parameters 
    {
			string(name: 'build_project_name', description: '빌드할 프로젝트 명?', defaultValue: 'DA101.ex-MyBatis', trim: true)
            choice(name: 'build_profile', description: 'Active Profile?', choices: "dev\ntest\nverify\nprod")
            choice(name: 'build_yn', description: '빌드하시겠습니까?', choices: "YES\nNO")
            choice(name: 'publish_yn', description: 'AP서버에 배포하시겠습니까?', choices: "YES\nNO")
            choice(name: 'deploy_yn', description: 'AP서버에 Deploy하시겠습니까?', choices: "YES\nNO")
            choice(name: 'app_restart_yn000', description: 'Application을 다시 시작 하시겠습니까?', choices: "YES\nNO")
    }
    
    options 
    {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '40')
        durabilityHint 'MAX_SURVIVABILITY'
		disableConcurrentBuilds()
        timestamps()
    }
    
    stages
    {
		/* =============================== */    
		/* SVN CheckOut                    */
   		/* =============================== */
        stage('Checkout') 
        {
            steps 
            {
                   echo "Checkout - ${build_project_name}"
                   script 
                   {
	                      def scm_url = "svn://192.168.35.111/egov.dev01/"
	                      if( "${build_profile}" == "dev" ) 
	                      {
	                          scm_url += "${build_project_name}/trunk"
	                      } 
	                      else if( "${build_profile}" == "test") 
	                      {
	                          scm_url += "${build_project_name}/branches/test"
	                      } 
	                      else if( "${build_profile}" == "verify") 
	                      {
	                          scm_url += "${build_project_name}/branches/verify"
	                      } 
	                      else if( "${build_profile}" == "prod") 
	                      {
	                          scm_url += "${build_project_name}/branches/runtime"
	                      }
		                      
					      checkout(
					                 [
					                   $class: 'SubversionSCM', 
					                   locations: 
					                              [[
					                                 cancelProcessOnExternalsFail:true,
					                    	         credentialsId: 'f6e84e69-b9ee-4204-89df-b146bf60b9fb',      /*  SVN ID : user01  */
		                                             depthOption: 'infinity',
		                                             ignoreExternalsOption: true,
			                                         local: '.',
								                     remote: scm_url
							                       ]],
							            quietOperation: false,
							            workspaceUpdater: [$class: 'UpdateUpdater']
		                              ]
		                            )	
	                }	
              }   
        }

		/* =============================== */    
		/* Maven Build                     */
   		/* =============================== */
        stage('Build') 
        {
            steps 
            {
				echo "Build - ${build_profile} : ${build_yn}"
				script 
				{
					if( "${build_yn}" == "YES" ) 
					{
						 sh "mvn -P${build_profile} -Dmaven.test.failure.ignore clean install -DbuildVersion=${buildVersion}"
					}
				}
            }
        }

		/* =============================== */    
		/* Maven Publish                     */
   		/* =============================== */
        stage('Publish') 
        {
	        steps 
	        {
                echo "Publish - ${publish_yn}"
		        script 
		        {
						if( "${publish_yn}" == "YES") 
						{
							if( "${build_profile}" == "dev") 
							{
								echo " ==== Start WEB Publish === "
								sshPublisher(
									            "VM01_SSH",                                         /* param : servername       */   
												 "target/*-web.jar",                                /* param : sourceFiles      */
												 "target",                                          /* param : removePrefix     */
												 "${build_project_name}/${BUILD_NUMBER}",           /* param : remoteDirectory  */
												 makeExecCommand_publish(
												                          "${build_project_name}", 
																		  "${BUILD_NUMBER}", 
																		  '/apphome/edudocs', 
																		  'webapp8', 
																		  'jar'
																		 )                           /* param : execCommand      */
										     )
								echo " === END WEB Publish === "
								
								echo " === Start WAS Publish === "
								sshPublisher(
								                 "VM01_SSH",                                         /* param : servername       */
											     "target/*-was.war",                                 /* param : sourceFiles      */
											     "target",                                           /* param : removePrefix     */
										         "${build_project_name}/${BUILD_NUMBER}",            /* param : remoteDirectory  */
											     makeExecCommand_publish(
											                              "${build_project_name}", 
											                              "${BUILD_NUMBER}", 
											                              '/apphome/edudocs', 
											                              'wasapp8', 
											                              'war'
											                             )                           /* param : execCommand      */
										    )
								echo " === END WAS Publish === "
							} 
							else if( "${build_profile}" == "test" ) 
							{					
							} 
							else if( "${build_profile}" == "verify" ) 
							{					
							} 
							else if( "${build_profile}" == "prod" ) 
							{					
							}		
						} /* ~ if  */
		        } /*  ~ script  */
	        } /*  ~ steps */
        } /*  ~ stage */
    }  /*  ~ stages */
}  /*  ~ pipeline */