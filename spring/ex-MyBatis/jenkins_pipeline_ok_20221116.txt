def sshPublisher( servername, sourceFiles, removePrefix, remoteDirectory, execCommand ) 
{
	if( servername == "" ) 
	{
		echo "servername이 없음"
		return
	}
	if( sourceFiles == "" ) 
	{
		echo "sourceFiles가 없음"
		return
	}
	if( removePrefix == "" ) 
	{
		echo "removePrefix가 없음"
		return
	}
	if( remoteDirectory == "" ) 
	{
		echo "remoteDirectory가 없음"
		return
	}
	if( execCommand == null ) 
	{
		execCommand = ""
	}

	echo  "###############################################"
	echo  "# sshPublisher param"
	echo "servername : " + servername
	echo "sourceFiles : " + sourceFiles
	echo "removePrefix : " + removePrefix
	echo "remoteDirectory : " + remoteDirectory
	echo "execCommand : " + execCommand
	echo  "###############################################"
	
    sshPublisher(
        publishers: 
          [
	           sshPublisherDesc(
		           configName: servername, 
			       transfers:  
			                   [
		                            sshTransfer
		                            (
			                            excludes: '',
			                            remoteDirectory: remoteDirectory,
			                            remoteDirectorySDF: false,
			                            removePrefix: removePrefix,
			                            sourceFiles: sourceFiles,
			                            execCommand: execCommand
		                            ) 
			                    ],
                    usePromotionTimestamp: false,
                    useWorkspaceInPromotion: false,
                	verbose: true
		        )    
           ]
    )
}

def makeExecCommandEnvironment( buildProjectName, buildNumber, docBase, targetBase ) 
{
	if( buildProjectName == "" ) return ""
	if( buildNumber == "" ) return ""
	if( docBase == "" ) return ""
	if( targetBase == "" ) return ""

	return '''

  	#!/bin/bash
    . /home/vm01/.bash_profile

	BUILD_DATE=`date +%Y%m%d%H%M`
	PROJECT_NAME=''' + buildProjectName + '''
	DOC_BASE=''' + docBase + '''
	TARGET_BASE=''' + targetBase + '''

	'''
}

def makeExecCommand_publish( buildProjectName, buildNumber, docBase, targetBase, compressionType ) 
{
	if( buildProjectName == "" ) return ""
	if( buildNumber == "" ) return ""
	if( docBase == "" ) return ""
	if( targetBase == "" ) return ""
	if( compressionType == "" ) return ""

	def sshCommand = makeExecCommandEnvironment(buildProjectName, buildNumber, docBase, targetBase) + '''
	echo "UnArchive Start==="

	PROJECT_NAME=''' + buildProjectName + '''
	DOC_BASE=''' + docBase + '''

	WEBHOME_PATH=$DOC_BASE/$PROJECT_NAME
	WEBHOME_BACKUP_PATH='/home/vm01/backup'

	mkdir -p $WEBHOME_PATH
	mkdir -p $WEBHOME_BACKUP_PATH	
	echo $WEBHOME_PATH
	echo $WEBHOME_BACKUP_PATH	

	if [ ''' + compressionType + ''' == "war" ]; then

		rm -Rf $WEBHOME_PATH/*.*

		cd /home/vm01/tmp
		cp *.''' + compressionType + ''' $WEBHOME_PATH
		cp *.''' + compressionType + ''' $WEBHOME_BACKUP_PATH

		rm -Rf /home/vm01/tmp/*.''' + compressionType + '''

		cd $WEBHOME_PATH

		jar xvf *.''' + compressionType + '''
		rm *.''' + compressionType + '''	
	fi

	echo "UnArchive End ========"  '''


	return sshCommand
}

pipeline 
{
    agent any
    
    environment 
    {
        node_name = 'master'
        buildVersion = VersionNumber(
             projectStartDate: '2018-05-01',
	         versionNumberString: '${BUILD_NUMBER}',
	         versionPrefix: '0.0.',
             worstResultForIncrement: 'SUCCESS'
        )
    }
    
    tools 
    {
        jdk '1.8.0_77'
        maven 'apache-maven-3.6.3'
    }
    
    parameters 
    {
			string(name: 'build_project_name', description: '빌드할 프로젝트 명?', defaultValue: 'DA101.ex-MyBatis', trim: true)
            choice(name: 'build_profile', description: 'Active Profile?', choices: "dev\ntest\nverify\nprod")
            choice(name: 'build_yn', description: '빌드하시겠습니까?', choices: "YES\nNO")
            choice(name: 'publish_yn', description: 'AP서버에 배포하시겠습니까?', choices: "YES\nNO")
            choice(name: 'deploy_yn', description: 'AP서버에 Deploy하시겠습니까?', choices: "YES\nNO")
            choice(name: 'app_restart_yn000', description: 'Application을 다시 시작 하시겠습니까?', choices: "YES\nNO")
    }
    
    options 
    {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '40')
        durabilityHint 'MAX_SURVIVABILITY'
		disableConcurrentBuilds()
        timestamps()
    }
    
    stages
    {
		/* =============================== */    
		/* SVN CheckOut                    */
   		/* =============================== */
        stage('Checkout') 
        {
            steps 
            {
                   echo "Checkout - ${build_project_name}"
                   script 
                   {
	                      def scm_url = "svn://192.168.35.111/egov.dev01/"
	                      if( "${build_profile}" == "dev" ) 
	                      {
	                          scm_url += "${build_project_name}/trunk"
	                      } 
	                      else if( "${build_profile}" == "test") 
	                      {
	                          scm_url += "${build_project_name}/branches/test"
	                      } 
	                      else if( "${build_profile}" == "verify") 
	                      {
	                          scm_url += "${build_project_name}/branches/verify"
	                      } 
	                      else if( "${build_profile}" == "prod") 
	                      {
	                          scm_url += "${build_project_name}/branches/runtime"
	                      }
		                      
					      checkout(
					                 [
					                   $class: 'SubversionSCM', 
					                   locations: 
					                              [[
					                                 cancelProcessOnExternalsFail:true,
					                    	         credentialsId: 'f6e84e69-b9ee-4204-89df-b146bf60b9fb',      /*  SVN ID : user01 or  credentialsId: 'svn_user01'  */
		                                             depthOption: 'infinity',
		                                             ignoreExternalsOption: true,
			                                         local: '.',
								                     remote: scm_url
							                       ]],
							            quietOperation: false,
							            workspaceUpdater: [$class: 'UpdateUpdater']
		                              ]
		                            )	
	                }	
              }   
        }

		/* =============================== */    
		/* Maven Build                     */
   		/* =============================== */
        stage('Build') 
        {
            steps 
            {
				echo "Build - ${build_profile} : ${build_yn}"
				script 
				{
					if( "${build_yn}" == "YES" ) 
					{
						 sh "mvn -e -X -P${build_profile} -Dmaven.test.failure.ignore clean install -DbuildVersion=${buildVersion}"
					}
				}
            }
        }

		/* =============================== */    
		/* Maven Publish                     */
   		/* =============================== */
        stage('Publish') 
        {
	        steps 
	        {
                echo "Publish - ${publish_yn}"
		        script 
		        {
						if( "${publish_yn}" == "YES") 
						{
							if( "${build_profile}" == "dev") 
							{
								echo " ==== Start WEB Publish === "
								echo " ==== [TO-DO] WEB Publish === "
								echo " === END WEB Publish === "
								
								echo " === Start WAS Publish === "
								sshPublisher(
								                 "VM01_SSH",                                         /* param : servername       */
											     "target/*",                      		             /* param : sourceFiles      */
											     "target",                                           /* param : removePrefix     */
										         "/home/vm01/tmp",    	                             /* param : remoteDirectory  */
											     makeExecCommand_publish(
											                              "${build_project_name}", 
											                              "${BUILD_NUMBER}", 
											                              '/home/vm01/webhome', 
											                              'target', 
											                              'war'
											                             )                           /* param : execCommand      */
										    )
								echo " === END WAS Publish === "
							} 
							else if( "${build_profile}" == "test" ) 
							{					
							} 
							else if( "${build_profile}" == "verify" ) 
							{					
							} 
							else if( "${build_profile}" == "prod" ) 
							{					
							}		
						} /* ~ if  */
		        } /*  ~ script  */
	        } /*  ~ steps */
        } /*  ~ stage */
    }  /*  ~ stages */
}  /*  ~ pipeline */